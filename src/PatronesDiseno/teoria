Los patrones de diseño son soluciones probadas y reutilizables para problemas comunes en el desarrollo de software.
En Java (y en otros lenguajes orientados a objetos), hay varios patrones de diseño importantes que ayudan a estructurar
el código de manera eficiente. Estos patrones generalmente se dividen en tres categorías:
Creacionales, Estructurales y Comportamentales. A continuación, te doy una descripción básica de algunos de los patrones
de diseño más importantes.

1. Patrones Creacionales
Estos patrones se centran en la forma de crear objetos.

    1.1. Singleton

        Propósito: Garantiza que una clase tenga una única instancia en todo el sistema y proporciona un punto de acceso
        global a ella.

        Uso: Se utiliza cuando se necesita una sola instancia, como en el caso de un administrador de configuración
        o una conexión a una base de datos.

    1.2. Factory Method
        Propósito: Proporciona una interfaz para crear objetos en una superclase, pero permite a las subclases alterar
        el tipo de objetos que se crean.

        Uso: Cuando necesitas delegar la responsabilidad de creación a las subclases, como en bibliotecas donde no se
        sabe qué tipo exacto de objeto se necesita.
        
2. Patrones Estructurales
Estos patrones tratan sobre cómo ensamblar objetos y clases en estructuras más grandes.

    2.1. Decorator
    Propósito: Permite agregar responsabilidades a objetos de manera dinámica. Alternativa flexible a la herencia para extender funcionalidad.
    Uso: Cuando necesitas añadir funcionalidad a objetos individuales, sin afectar a otros objetos de la misma clase.

    2.2. Composite
    Propósito: Permite tratar objetos individuales y colecciones de objetos de manera uniforme. Se usa una estructura en árbol.
    Uso: Cuando necesitas representar jerarquías de objetos como menús, estructuras organizacionales o gráficos.

3. Patrones Comportamentales
Estos patrones se centran en cómo los objetos se comunican entre sí.

    3.1. Observer
    Propósito: Permite que un objeto notifique automáticamente a múltiples objetos sobre cualquier cambio en su estado.
    Uso: Se usa comúnmente en eventos o sistemas de notificación como GUIs o sistemas de publicación/suscripción.